# Archiving and Logging Data Process and Answers

Please edit this file by adding the solution commands on the line below the prompt.

Save and submit the completed file for your homework submission.

---

### Step 1: Create, Extract, Compress, and Manage tar Backup Archives

1. Command to **extract** the `TarDocs.tar` archive to the current directory: tar -vxf TarDocs.tar

2. Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory: tar -cf Javaless_Docs.tar --exclude='TarDocs/Documents/Java' TarDocs/Documents

3. Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive: tar -tvf Javaless_Docs.tar | grep 'Java/'

**Bonus** 
- Command to create an incremental archive called `logs_backup.tar.gz` with only changed files to `snapshot.file` for the `/var/log` directory: sudo tar --listed-incremental=snapshot.file -czf logs_backup.tar.gz /var/log

#### Critical Analysis Question

- Why wouldn't you use the options `-x` and `-c` at the same time with `tar`?

---If use both -c and -x options together in the same command, tar will create a new archive file and then attempt to extract its contents at the same time, which will not work as intended. Therefore, it's recommended to use either -c or -x option depending on your use case.





### Step 2: Create, Manage, and Automate Cron Jobs

1. Cron job for backing up the `/var/log/auth.log` file: 0 6 * * 3 tar -zcf /auth_backup.tgz /var/log/auth.log

--- 

### Step 3: Write Basic Bash Scripts

1. Brace expansion command to create the four subdirectories: mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk}


2. Paste your `system.sh` script edits below:

    
    #!/bin/bash
    free -h > ~/backups/freemem/free_mem.txt
    df -h > ~/backups/diskuse/disk_usage.txt
    lsof > ~/backups/openlist/open_list.txt
    du -h > ~/backups/freedisk/free_disk.txt

3. Command to make the `system.sh` script executable: chmod +x system.sh

**Optional**
- Commands to test the script and confirm its execution: sudo sh system.sh or sudo./system.sh if in the same directory

**Bonus**
- Command to copy `system` to system-wide cron directory: sudo cp system /etc/cron.d/

---

### Step 4. Manage Log File Sizes
 
1. Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below:

    ```bash
    /var/log/auth.log {
   weekly
   missingok
   rotate 7
   notifempty
   delaycompress
   compress
}

---

### Bonus: Check for Policy and File Violations

1. Command to verify `auditd` is active: sudo systemctl status auditd; sudo apt-get install auditd


2. Command to set number of retained logs and maximum log file size:

    - Add the edits made to the configuration file below:

    
    max_log_file = 35
    num_logs = 7

3. Command using `auditd` to set rules for `/etc/shadow`, `/etc/passwd` and `/var/log/auth.log`:


    - Add the edits made to the `rules` file below:

    
    -w /etc/shadow -p wra -k hashpass_audit
    -w /etc/passwd -p wra -k userpass_audit
    -w /var/log/auth.log -p wra -k authlog_audit



4. Command to restart `auditd`: sudo systemctl restart auditd

5. Command to list all `auditd` rules: sudo auditctl -l

6. Command to produce an audit report: sudo ausearch -ts 

7. Create a user with `sudo useradd attacker` and produce an audit report that lists account modifications: sudo ausearch -ua attacker -m USER_ADD,USER_MODIFY,USER_ROLE_CHANGE -i

8. Command to use `auditd` to watch `/var/log/cron`: sudo auditctl -w /var/log/cron -p rwxa

9. Command to verify `auditd` rules: sudo auditctl -l

---

### Bonus (Research Activity): Perform Various Log Filtering Techniques

1. Command to return `journalctl` messages with priorities from emergency to error: journalctl -p emerg..err


1. Command to check the disk usage of the system journal unit since the most recent boot: journalctl --disk-usage


1. Comand to remove all archived journal files except the most recent two: journalctl --vacuum-files=2



1. Command to filter all log messages with priority levels between zero and two, and save output to `/home/sysadmin/Priority_High.txt`: journalctl -p 0..2 > /home/sysadmin/Priority_High.txt

1. Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below:

    ```bash
    0 8 * * * journalctl -p 0..2 > /home/sysadmin/Priority_High.txt

---
Â© 2022 Trilogy Education Services, a 2U, Inc. brand. All Rights Reserved.
